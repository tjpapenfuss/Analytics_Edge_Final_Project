rocr.pred.df = data.frame(fpr=slot(performance(rocr.pred, "tpr", "fpr"),"x.values")
[[1]],tpr=slot(performance(rocr.pred, "tpr", "fpr"),
"y.values")[[1]])
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
performance(rocr.pred, "auc")@y.values[[1]]
auc
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
pred.test = predict(logRegModel, newdata=df.test, type="response")
head(pred.test)
#pred.test= ifelse(pred.test>0.5,1,0)
Accuracy.test = mean(pred.test!= df.test$review_overall)
print(1- Accuracy.test)
#Prediction in the Test dataset
pred.test = predict(logRegModel, newdata=df.test, type="response")
head(pred.test)
#pred.test= ifelse(pred.test>0.5,1,0)
Accuracy.test = mean(pred.test!= df.test$review_overall)
print(1- Accuracy.test)
# p <- predict(model, newdata=subset(df.test,select=c(2,3,4,5,6,7,8)), type="response")
pr <- prediction(pred.test, df.test$review_overall)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
# Remove all the profiles and beers that are small in number.
beer_top_profiles <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top_profiles[beer_top_profiles$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
set.seed(123)
split = createDataPartition(beer_final$review_overall, p = 0.70, list = FALSE)
beer.train = beer_final[split, ]
beer.test = beer_final[-split, ]
#Subset the data frame to only use columns we are interested in using as predictors
df = subset(beer.train, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
df.test = subset(beer.test, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
beer.df
beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top <- beer_top[beer_top$brewery_name %in% uniqueID.profiles[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top[beer_top$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 50)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 50)
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
# Remove all the profiles and beers that are small in number.
beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top <- beer_top[beer_top$brewery_name %in% uniqueID.profiles[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top[beer_top$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 50)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 50)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
# Remove all the profiles and beers that are small in number.
beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top <- beer_top[beer_top$brewery_name %in% uniqueID.profiles[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 50)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 5)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
# Remove all the profiles and beers that are small in number.
beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top <- beer_top[beer_top$brewery_name %in% uniqueID.profiles[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top[beer_top$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
View(beer_top)
uniqueID.breweries
uniqueID.beers
# Remove all the profiles and beers that are small in number.
beer_top_profs <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.profiles[], , drop = FALSE]
# Remove all the profiles and beers that are small in number.
beer_top_profs <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 50)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 100)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
# Remove all the profiles and beers that are small in number.
beer_top_profs <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top_brewery[beer_top_brewery$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top_brewery[beer_top_brewery$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
#beer_top <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_final <- beer_top_brewery[beer_top_brewery$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 50)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
uniqueID.style <- unique(beer_top_styles$beer_style)
# Remove all the profiles and beers that are small in number.
beer_top_profs <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_style <- beer_top_brewery[beer_top_brewery$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_final <- beer_top_style[beer_top_style$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 1000)
beer_top_style <- beer_top_brewery[beer_top_brewery$beer_style %in% uniqueID.style[], , drop = FALSE]
uniqueID.style <- unique(beer_top_styles$beer_style)
beer_top_style <- beer_top_brewery[beer_top_brewery$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_top_styles
str(beer.df)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 100000)
uniqueID.style <- unique(beer_top_styles$beer_style)
beer_top_style <- beer_top_brewery[beer_top_brewery$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 10000)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
str(beer_top_profiles)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
uniqueID.style <- unique(beer_top_styles$beer_style)
# Remove all the profiles and beers that are small in number.
beer_top_profs <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_brewery <- beer_top_profs[beer_top_profs$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_style <- beer_top_brewery[beer_top_brewery$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_final <- beer_top_style[beer_top_style$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
str(beer.df)
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 10000)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
uniqueID.style <- unique(beer_top_styles$beer_style)
# Remove all the profiles and beers that are small in number.
beer_top_profiles <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_breweries <- beer_top_profiles[beer_top_profiles$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_styles <- beer_top_breweries[beer_top_breweries$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_final <- beer_top_styles[beer_top_styles$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
rm(beer_top_profiles)
rm(beer_top_breweries)
rm(beer_top_styles)
# The below code reads in all beers.
beer.df = read.csv("AE-FinalProj-data/beer_reviews.csv")
beer.df = na.omit(beer.df)
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 10000)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
uniqueID.style <- unique(beer_top_styles$beer_style)
# Remove all the profiles and beers that are small in number.
beer_top_profiles <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_breweries <- beer_top_profiles[beer_top_profiles$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_styles <- beer_top_breweries[beer_top_breweries$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_final <- beer_top_styles[beer_top_styles$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
rm(beer_top_profiles)
rm(beer_top_breweries)
rm(beer_top_styles)
set.seed(123)
split = createDataPartition(beer_final$review_overall, p = 0.70, list = FALSE)
beer.train = beer_final[split, ]
beer.test = beer_final[-split, ]
rm(beer_top_beers)
rm(beer_final)
#Subset the data frame to only use columns we are interested in using as predictors
beer.train = subset(beer.train, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
beer.test = subset(beer.test, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
beer.train$review_overall<-ifelse(df$review_overall>= 4,1,0)
beer.train = subset(beer.train, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
beer_top_profiles = beer.df %>% group_by(review_profilename) %>%
filter(n() >= 50)
# Get the top beers by number of ratings.
beer_top_beers = beer.df %>% group_by(beer_beerid) %>%
filter(n() >= 50)
beer_top_styles = beer.df %>% group_by(beer_style) %>%
filter(n() >= 10000)
beer_top_breweries = beer.df %>% group_by(brewery_name) %>%
filter(n() >= 1000)
# Get the unique counts of the profiles and beers.
uniqueID.profiles <- unique(beer_top_profiles$review_profilename)
uniqueID.beers <- unique(beer_top_beers$beer_beerid)
uniqueID.breweries <- unique(beer_top_breweries$brewery_name)
uniqueID.style <- unique(beer_top_styles$beer_style)
# Remove all the profiles and beers that are small in number.
beer_top_profiles <- beer.df[beer.df$review_profilename %in% uniqueID.profiles[], , drop = FALSE]
beer_top_breweries <- beer_top_profiles[beer_top_profiles$brewery_name %in% uniqueID.breweries[], , drop = FALSE]
beer_top_styles <- beer_top_breweries[beer_top_breweries$beer_style %in% uniqueID.style[], , drop = FALSE]
beer_final <- beer_top_styles[beer_top_styles$beer_beerid %in% uniqueID.beers[], , drop = FALSE]
rm(beer_top_profiles)
rm(beer_top_breweries)
rm(beer_top_styles)
rm(beer_top_beers)
set.seed(123)
split = createDataPartition(beer_final$review_overall, p = 0.70, list = FALSE)
beer.train = beer_final[split, ]
beer.test = beer_final[-split, ]
rm(beer_final)
#Subset the data frame to only use columns we are interested in using as predictors
beer.train = subset(beer.train, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
beer.test = subset(beer.test, select = -c(review_time,review_taste, review_palate,
beer_name,beer_beerid, review_profilename,
review_aroma,review_appearance, brewery_id))
#Normalizing between 0 and 1 for Linear regression
beer.train$review_overall<-ifelse(df$review_overall>= 4,1,0)
#Normalizing between 0 and 1 for Linear regression
beer.train$review_overall<-ifelse(beer.train$review_overall>= 4,1,0)
table(beer.train$review_overall)
logRegModel <- glm(review_overall ~ + brewery_name + beer_style + beer_abv, data = beer.train, family="binomial")
#Prediction in the train set
pred = predict(logRegModel, data=beer.train, type="response")
pred.0.5=ifelse(pred>0.5,1,0)
pred.0.5=ifelse(pred>0.5,1,0)
Accuracy = mean(pred.0.5!= beer.train$review_overall)
print(1- Accuracy)
beer.test$review_overall<-ifelse(beer.test$review_overall>= 4,1,0)
table(beer.test$review_overall)
#Prediction in the Test dataset
pred.test = predict(logRegModel, newdata=beer.test, type="response")
head(pred.test)
pred.test.0.5= ifelse(pred.test>0.5,1,0)
Accuracy.test = mean(pred.test!= beer.test$review_overall)
print(1- Accuracy.test)
Accuracy.test = mean(pred.test.0.5!= beer.test$review_overall)
print(1- Accuracy.test)
beer.test$review_overall = as.factor(as.integer(beer.test$review_overall))
library(ROCR)
# p <- predict(model, newdata=subset(beer.test,select=c(2,3,4,5,6,7,8)), type="response")
pr <- prediction(pred.test, beer.test$review_overall)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
library(ROCR)
library(ggplot2)
pred.test = predict(logRegModel, newdata=beer.test, type="response")
rocr.pred = prediction(pred.test, beer.test$review_overall)
rocr.pred.df = data.frame(fpr=slot(performance(rocr.pred, "tpr", "fpr"),"x.values")
[[1]],tpr=slot(performance(rocr.pred, "tpr", "fpr"),
"y.values")[[1]])
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_line(aes(y=x)) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_line(aes(y=1)) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
title("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
title("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=30), axis.text=element_text(size=20)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title=element_text(size=15), axis.text=element_text(size=15)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(plot.title=element_text(size=25),axis.title=element_text(size=15), axis.text=element_text(size=15)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(plot.title=element_text(size=25, hjust=0.5),axis.title=element_text(size=15), axis.text=element_text(size=15)))
print(ggplot(rocr.pred.df,aes(x=fpr)) +
geom_line(aes(y=tpr),lwd=1) +
geom_abline() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC curve") +
theme_bw() +
xlim(0, 1) +
ylim(0, 1) +
theme(plot.title=element_text(size=25, hjust=0.4),axis.title=element_text(size=15), axis.text=element_text(size=15)))
confusionMatrix(beer.test$review_overall, pred.test)
confusionMatrix(beer.test$review_overall, pred.test.0.5)
pred.test.0.5= as.factor(ifelse(pred.test>0.5,1,0))
confusionMatrix(beer.test$review_overall, pred.test.0.5)
pr.tpr
prf.tpr
View(prf)
prf$x.name
pr$tpr
prf$tpr
#[0.7316206]
pr0.5 <- prediction(pred.test.0.5, beer.test$review_overall)
#[0.7316206]
pr0.5 <- prediction(ifelse(pred.test>0.5,1,0), beer.test$review_overall)
pred.test.0.5 = ifelse(pred.test>0.5,1,0)
pred.test.0.9 = ifelse(pred.test>0.9,1,0)
pr0.5 <- prediction(pred.test.0.5, beer.test$review_overall)
pr0.9 <- prediction(pred.test.0.9, beer.test$review_overall)
pr0.5
prf0.5 <- performance(pr0.5, measure = "tpr", x.measure = "fpr")
prf0.9 <- performance(pr0.9, measure = "tpr", x.measure = "fpr")
View(prf0.5)
#calculate TPR
sensitivity(beer.test$review_overall, as.factor(pred.test.0.5))
sensitivity(beer.test$review_overall, as.factor(pred.test.0.9))
#calculate TNR
specificity(beer.test$review_overall, as.factor(pred.test.0.5))
specificity(beer.test$review_overall, as.factor(pred.test.0.9))
confusionMatrix(beer.test$review_overall, as.factor(pred.test.0.9))
pred.test.0.8 = ifelse(pred.test>0.8,1,0)
prf0.8 <- performance(pr0.8, measure = "tpr", x.measure = "fpr")
confusionMatrix(beer.test$review_overall, as.factor(pred.test.0.8))
sensitivity(beer.test$review_overall, as.factor(pred.test.0.8))
#calculate TPR
sensitivity(beer.test$review_overall, as.factor(pred.test.0.5))
confusion.matrix = table(beer.test$review_overall, pred.test.0.5)
confusion.matrix
TPR <- confusion.matrix[2,2]/sum(confusion.matrix[2,])
TPR
FPR <- confusion.matrix[1,2]/sum(confusion.matrix[1,])
FPR
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
Accuracy.test = mean(pred.test.0.5!= beer.test$review_overall)
print(1- Accuracy.test)
loss.matrix = matrix(0,2,2)
# Then we can specify the two non-zero entries:
loss.matrix[2,1] = 7550
loss.matrix[1,2] = 1200
# We can take a look at the final table:
loss.matrix
### Question b. See word document for calculations.
loss.matrix = matrix(0,2,2)
# Then we can specify the two non-zero entries:
loss.matrix[2,1] = 5000
loss.matrix[1,2] = 1000
# We can take a look at the final table:
loss.matrix
# Then we can specify the two non-zero entries:
loss.matrix[2,1] = 1000
loss.matrix[1,2] = 5000
# We can take a look at the final table:
loss.matrix
### Question c.
# Fitting the CART model
logRegModel2 <- glm(review_overall ~ + brewery_name + beer_style + beer_abv, parms=list(loss=loss.matrix), data = beer.train, family="binomial")
